# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name:  Wpf Continuous Integration

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - mainxxx
      #- 'maintenence/*'
  pull_request:
    branches:
      - main

jobs:

  build:

    strategy:
      matrix:
        #targetplatform: [x86, x64]
        targetplatform: [AnyCPU]
        configuration: [Release]

    runs-on: windows-latest

    env:
      App_Packages_Directory: AppPackages
      SigningCertificate: EngSyst-Singing.pfx
      Solution_Path: Iso20022ToEburyFileSoln.sln
      Test_Project_Path: EburyMPIsoFilesLibraryTests\EburyMPIsoFilesLibraryTests.csproj
      Wpf_Project_Path: EburyMPIsoFiles\EburyMPIsoFiles.csproj
      Wap_Project_Directory: EburyMPIsoFiles.Package
      Wap_Project_Name: EburyMPIsoFiles.Package.wapproj
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands

      ApplyConfiguration_Credentials_UserName: ${{ secrets.ApplyConfiguration_Credentials_UserName }}
      ApplyConfiguration_Credentials_Password: ${{ secrets.ApplyConfiguration_Credentials_Password }}
      ApplyConfiguration_BaseUrl: ${{ secrets.ApplyConfiguration_BaseUrl }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
        submodules: 'true'
        token: ${{ secrets.PAT_TOKEN }}

    # Secrets for testing
    - uses: microsoft/variable-substitution@v1 
      with:
        files: 'EburyMPIsoFilesLibraryTests/ApplyConfiguration.json'
      env: 
        ApplyConfiguration.Credentials.UserName: ${{ secrets.ApplyConfiguration_Credentials_UserName }}
        ApplyConfiguration.Credentials.Password: ${{ secrets.ApplyConfiguration_Credentials_Password }}

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    #- name: Use Nerdbank.GitVersioning to set version variables
    #  uses: dotnet/nbgv@master
    #  id: nbgv

    # Install the .NET Core workload
    - name: Install .NET 
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '4.7.2'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Update the version before build
    #- name: Update manifest version
    #  run: |
    #    [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
    #    $manifest.Package.Identity.Version = "${{ steps.nbgv.outputs.SimpleVersion }}.0"
    #    $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

    ## Test
    #- name: Execute Unit Tests
    #  run: dotnet test $env:Test_Project_Path

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration #/p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{matrix.configuration}}
        RuntimeIdentifier: win-${{matrix.targetplatform}}

    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
      run: msbuild $env:Solution_Path /p:TargetFrameworkVersion=v4.7.2 /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        AppxBundle: Never
        BuildMode: SideloadOnly
        TargetPlatform: ${{ matrix.targetplatform }}
        Configuration: ${{ matrix.configuration }}
        RuntimeIdentifier: win-${{matrix.targetplatform}}

    # Remove the .pfx
    - name: Remove the .pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:SigningCertificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}